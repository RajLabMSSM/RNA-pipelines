import pandas as pd
import os
RWD = os.getcwd()

inFolder = config['inFolder']
# create outFolder path using dataCode
outFolder = config['outFolder'] + config['dataCode'] + '/'

#refCondition = config['refCondition']
#altCondition = config['altCondition']

outFolder = config['outFolder']
dataCode = config['dataCode']
# annotation
#refFolder = config['refFolder']
#refFile = config['refFile']
#refCode = config['refCode']

#rapidVersion = config['rapidVersion']

stranded = config["stranded"]
nBootstraps =  config["nBootstraps"]

metadata = config['metadata']

meta = pd.read_csv(metadata, sep = "\t")

samples = meta['sample']

# put together file paths
#kallisto_counts = meta['rapid_path'] + "/Processed/" + rapidVersion + "/kallisto/abundance.h5"

# allow for choosing of modules
#modules = config['modules']
#target_files = [ outFolder + "config.yaml", metadata ]

fastaFiles = config['fastaFiles']

#kallisto_out = outFolder + "kallisto_sleuth/" + dataCode + "_results.RData"
#target_files.append(kallisto_out)

#localrules: copyConfig

rule all:
	input:
		expand("{outFolder}/{sample}/{fasta}/abundance.h5", outFolder = outFolder, fasta = fastaFiles, sample = samples)
		#expand("{outFolder}/{fasta}.index", outFolder = outFolder, fasta = fastaFiles)

rule copyConfig:
	input:
		config = workflow.overwrite_configfile,
		metadata = metadata

	output:
		config = outFolder + "config.yaml",
		metadata = outFolder + "samples.tsv"
	shell:
		"cp {input.config} {output.config};"
		"cp {input.metadata} {output.metadata}"

rule kallisto_index:
	input:
		file=lambda wildcards: f"{config['fastaFiles'][wildcards.fasta]}"
	output:
		outFolder + "/indexes/{fasta}.index"
	shell:
		"kallisto index -i {output} {input}"

rule kallisto_quant:
	input:
		index = outFolder + "/indexes/{fasta}.index",
		r1_fastq_gz = inFolder + '/{sample}.R1.fastq.gz',
		r2_fastq_gz = inFolder + '/{sample}.R2.fastq.gz'
	params:
		stranded = stranded,
		nBootstraps = nBootstraps,
		quantOutFolder = outFolder + "/{sample}/{fasta}/"
	output:
		outFolder + "/{sample}/{fasta}/abundance.h5"
	shell:
		"kallisto quant "
		" -i {input.index} "
		" --bootstrap-samples={params.nBootstraps} "
		" {params.stranded} "		
		" -o {params.quantOutFolder} "
		" {input.r1_fastq_gz} "
		" {input.r2_fastq_gz} "
